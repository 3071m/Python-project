from tkinter import *
from tkinter import ttk, filedialog
from tkinterdnd2 import DND_FILES, TkinterDnD
from PyPDF2 import PdfMerger
from tkinter import messagebox
from PyPDF2 import PdfReader, PdfWriter
from tkinter import simpledialog
from pdf2image import convert_from_path
import os

class PDFToolkitApp(TkinterDnD.Tk):
    def __init__(self):
        super().__init__()
        self.title("PDF Toolkit by ‡∏°‡∏≠‡∏°‡πÅ‡∏°‡∏°")
        self.geometry("600x400")
        self.configure(bg="#f8f8f8")
        
        self.pdf_files = []

        Label(self, text="üìÑ Drag & Drop PDF Files", font=("Segoe UI", 16), bg="#f8f8f8").pack(pady=10)

        self.drop_area = Listbox(self, selectmode=MULTIPLE, width=60, height=10)
        self.drop_area.pack(pady=10)
        self.drop_area.insert(END, "üì• ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...")

        self.drop_area.drop_target_register(DND_FILES)
        self.drop_area.dnd_bind('<<Drop>>', self.on_drop)

        # üîΩ Scrollable Button Area
        canvas = Canvas(self, height=200, bg="#f8f8f8")
        scrollbar = Scrollbar(self, orient=VERTICAL, command=canvas.yview)
        scrollable_frame = Frame(canvas, bg="#f8f8f8")

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(
                scrollregion=canvas.bbox("all")
            )
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side=LEFT, fill=BOTH, expand=True)
        scrollbar.pack(side=RIGHT, fill=Y)

        # üîò Buttons (inside scrollable frame)
        ttk.Button(scrollable_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF ‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏°", command=self.select_files).pack(pady=5)
        ttk.Button(scrollable_frame, text="üß© ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå PDF", command=self.merge_pdfs).pack(pady=5)
        ttk.Button(scrollable_frame, text="üî™ ‡πÅ‡∏¢‡∏Å‡∏´‡∏ô‡πâ‡∏≤ PDF", command=self.split_pdf).pack(pady=5)
        ttk.Button(scrollable_frame, text="üóëÔ∏è ‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤ PDF", command=self.delete_pages).pack(pady=5)
        ttk.Button(self, text="üñºÔ∏è ‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", command=self.pdf_to_images).pack(pady=5)



    def on_drop(self, event):
        files = self.tk.splitlist(event.data)
        self.add_files(files)

    def select_files(self):
        files = filedialog.askopenfilenames(filetypes=[("PDF files", "*.pdf")])
        self.add_files(files)

    def add_files(self, files):
        self.pdf_files.clear()
        self.drop_area.delete(0, END)
        for f in files:
            if f.lower().endswith(".pdf"):
                self.pdf_files.append(f)
                self.drop_area.insert(END, os.path.basename(f))
                
    def merge_pdfs(self):
        print("‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:", self.pdf_files)
        if len(self.pdf_files) < 2:
            messagebox.showwarning("‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡πÑ‡∏ü‡∏•‡πå PDF")
            return

        output_path = filedialog.asksaveasfilename(
            defaultextension=".pdf",
            filetypes=[("PDF files", "*.pdf")],
            title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô..."
        )

        if not output_path:
            return

        merger = PdfMerger()

        try:
            for pdf in self.pdf_files:
                merger.append(pdf)

            merger.write(output_path)
            merger.close()
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n{output_path}")
        except Exception as e:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n{str(e)}")

    def split_pdf(self):
        if len(self.pdf_files) != 1:
            messagebox.showwarning("‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 ‡πÑ‡∏ü‡∏•‡πå ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏´‡∏ô‡πâ‡∏≤")
            return

        pdf_path = self.pdf_files[0]
        reader = PdfReader(pdf_path)
        total_pages = len(reader.pages)

        # ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô 1-3
        page_range = simpledialog.askstring("‡πÅ‡∏¢‡∏Å‡∏´‡∏ô‡πâ‡∏≤ PDF", f"‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_pages} ‡∏´‡∏ô‡πâ‡∏≤\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 1-3):")

        if not page_range:
            return

        try:
            start, end = map(int, page_range.split('-'))
            if start < 1 or end > total_pages or start > end:
                raise ValueError()
        except:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô 1-3 ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå")
            return

        output_path = filedialog.asksaveasfilename(
            defaultextension=".pdf",
            filetypes=[("PDF files", "*.pdf")],
            title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏¢‡∏Å‡∏´‡∏ô‡πâ‡∏≤ PDF ‡πÄ‡∏õ‡πá‡∏ô..."
        )

        if not output_path:
            return

        writer = PdfWriter()
        for i in range(start-1, end):
            writer.add_page(reader.pages[i])

        try:
            with open(output_path, "wb") as f_out:
                writer.write(f_out)
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡πÅ‡∏¢‡∏Å‡∏´‡∏ô‡πâ‡∏≤ PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà:\n{output_path}")
        except Exception as e:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n{str(e)}")

    def delete_pages(self):
        if len(self.pdf_files) != 1:
            messagebox.showwarning("‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 ‡πÑ‡∏ü‡∏•‡πå ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤")
            return

        pdf_path = self.pdf_files[0]
        reader = PdfReader(pdf_path)
        total_pages = len(reader.pages)

        page_input = simpledialog.askstring(
            "‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤ PDF",
            f"‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_pages} ‡∏´‡∏ô‡πâ‡∏≤\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ , ‡πÄ‡∏ä‡πà‡∏ô 1,3,5):"
        )

        if not page_input:
            return

        try:
            pages_to_delete = sorted(set(int(p.strip()) for p in page_input.split(',') if p.strip().isdigit()))
            if not all(1 <= p <= total_pages for p in pages_to_delete):
                raise ValueError("‡∏ö‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á PDF")
        except Exception as e:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:\n{str(e)}")
            return

        output_path = filedialog.asksaveasfilename(
            defaultextension=".pdf",
            filetypes=[("PDF files", "*.pdf")],
            title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß"
        )
        if not output_path:
            return

        writer = PdfWriter()
        try:
            for i in range(total_pages):
                if (i + 1) not in pages_to_delete:
                    writer.add_page(reader.pages[i])
            with open(output_path, "wb") as f_out:
                writer.write(f_out)
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤ PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà:\n{output_path}")
        except Exception as e:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n{str(e)}")

if __name__ == "__main__":
    app = PDFToolkitApp()
    app.mainloop()
